@inject IDialogService DialogService
@inject DataService dataService
@using Microsoft.FluentUI.AspNetCore.Components

<FluentDesignSystemProvider Density="-1">

    @if (Mode == TransactionListModeEnum.Full)
    {
        <FluentDataGrid Items="@transactions" ResizableColumns=true Pagination="@pagination"
                        GridTemplateColumns="@gridTemplateColumns" Style="@gridStyle">

            @*Column 1 - Date*@
            <PropertyColumn Property="x => x.Date" Format="d" Align="Align.Center" Title="Date" Sortable="true"
                            InitialSortDirection="SortDirection.Descending" IsDefaultSortColumn="true"/>

            @*Column 2 - Account*@
            <TemplateColumn Title="Account" Align="Align.Center" Sortable="true" SortBy="@accountSort">
                <div style="display:flex;width:190px">
                    <div style="display:flex;align-items: center">@context.Account.ShownName</div>
                    <FluentSpacer/>
                    <FluentButton IconEnd="@(new Icons.Filled.Size12.Filter())" Style="height: 20px"
                                  OnClick="@(() => FilterByAccount(context, true))"/>
                    <FluentButton IconEnd="@(new Icons.Filled.Size12.Dismiss())" Style="height: 20px;margin-right: 10px"
                                  OnClick="@(() => FilterByAccount(context, false))"/>
                    <div style="display:flex;align-items: center"></div>
                </div>
            </TemplateColumn>

            @*Column 3 - Amount*@
            <PropertyColumn Property="x => x.AmountExt" Format="c2" Align="Align.End" Title="Amount"/>

            @*Column 4 - Category*@
            <TemplateColumn Align="Align.Center" Title="Category" Sortable="true" SortBy="@categorySort">
                @if (CategoryFilters)
                {
                    <div style="display:flex;width:290px">
                        <FluentIcon Value="@(context.Category.objIcon)"/>
                        <div style="display:flex;align-items: center"> @context.Category.Name </div>
                        <FluentSpacer/>
                        <FluentButton IconEnd="@(new Icons.Filled.Size12.Filter())" Style="height: 20px"
                                      OnClick="@(() => FilterByCategory(context, true))"/>
                        <FluentButton IconEnd="@(new Icons.Filled.Size12.Dismiss())" Style="height: 20px;margin-right: 10px"
                                      OnClick="@(() => FilterByCategory(context, false))"/>
                        <div style="display:flex;align-items: center"></div>
                    </div>
                }
                else
                {
                    <FluentIcon Value="@(context.Category.objIcon)" Style="margin-right: 15px"/>
                    @context.Category.Name
                }
            </TemplateColumn>

            @*Column 5 - Description*@
            <PropertyColumn Property="x => x.Description" Title="Description" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch type="search" Autofocus=true @bind-Value=filterDescription @oninput="FilterByDescription"
                                      @bind-Value:after="FilterByDescriptionClear" Placeholder="Description..."/>
                    </div>
                </ColumnOptions>
            </PropertyColumn>

            @*Column 6 - Rule applied*@
            <TemplateColumn Align="Align.Center" Title="Rule applied" Sortable="true" SortBy="@ruleSort">
                @if (context.IsRuleApplied)
                {
                    <FluentIcon Value="@(new Icons.Regular.Size20.Tag())"/>
                }
            </TemplateColumn>

            @*Column 7 - Actions*@
            <TemplateColumn Align="@Align.End" Title="Actions" Sortable="false">
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" Style="height: 20px" OnClick="@(() => EditTransaction(context))"/>
            </TemplateColumn>

        </FluentDataGrid>

        <FluentPaginator State="@pagination">
            <SummaryTemplate>
                Total <strong>@(Math.Abs(transactions.ToList().Sum(x => x.AmountExt)).ToString("C"))</strong> in <strong>@pagination.TotalItemCount</strong> items
            </SummaryTemplate>
        </FluentPaginator>
    }
    else if (Mode == TransactionListModeEnum.Short)
    {
        <FluentDataGrid Items="@transactions" GridTemplateColumns="1fr 6fr 1fr" Style="@gridStyle">
            <PropertyColumn Property="x => x.Date" Format="MMM dd" Align="Align.Center" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending"/>
            <TemplateColumn Align="Align.Start">
                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" Width="100%" HorizontalGap="10">
                    <FluentIcon Value="@(context.Category.objIcon)"/>
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left" VerticalGap="0">
                        <FluentLabel Color="Color.Neutral">@context.Description</FluentLabel>
                        <FluentLabel Color="Color.Info">@context.Account.ShownName</FluentLabel>
                    </FluentStack>
                </FluentStack>
            </TemplateColumn>
            <PropertyColumn Property="x => x.AmountExt" Format="c2" Align="Align.End" Title="Amnt"/>
            @if (EditEnable)
            {
                <TemplateColumn Align="@Align.End" Sortable="false">
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" Style="height: 20px" OnClick="@(() => EditTransaction(context))"/>
                </TemplateColumn>
            }
        </FluentDataGrid>
    }

</FluentDesignSystemProvider>

@code {
    [Parameter] public TransactionListModeEnum Mode { get; set; } = TransactionListModeEnum.Full;
    [Parameter] public int HeightVH { get; set; } = 80;
    [Parameter] public int HeightPx { get; set; } = 0;

    [Parameter] public string ChartPeriod { get; set; } = "a";
    [Parameter] public DateTime? DateStart { get; set; }
    [Parameter] public DateTime? DateEnd { get; set; }
    [Parameter] public int PageSize { get; set; } = 19;
    [Parameter] public int? Category { get; set; }
    [Parameter] public bool CategoryFilters { get; set; } = true;
    [Parameter] public bool OnlyVisibleAccounts { get; set; }
    [Parameter] public bool? RuleApplied { get; set; }
    [Parameter] public bool EditEnable { get; set; }

    [Parameter] public EventCallback Changed { get; set; }

    readonly PaginationState pagination = new();
    string gridStyle;
    string gridTemplateColumns = "100px 200px 100px 300px 500px";

    GridSort<Transaction> accountSort = GridSort<Transaction>.ByAscending(x => x.Account.Name);
    GridSort<Transaction> amountSort = GridSort<Transaction>.ByAscending(x => x.Amount);

    GridSort<Transaction> categorySort = GridSort<Transaction>
        .ByAscending(x => x.Category.Parent == null ? x.Category.Name : x.Category.Parent.Name)
        .ThenAscending(x => x.Category.Name);

    GridSort<Transaction> ruleSort = GridSort<Transaction>.ByAscending(x => x.IsRuleApplied);

    IQueryable<Transaction> allTransactions;

    IQueryable<Transaction> transactions
    {
        get
        {
            if (allTransactions == null)
                return null;
            var result = allTransactions;
            // external date filter
            if (DateStart.HasValue) result = result.Where(x => x.Date >= DateStart);
            if (DateEnd.HasValue) result = result.Where(x => x.Date < DateEnd);
            // custom category filter
            result = result.Where(x => filterCategory == 0 || x.Category.Id == filterCategory || (x.Category.Parent != null && x.Category.Parent.Id == filterCategory));
            // external category filter   
            if (Category.HasValue)
                result = result.Where(x => x.Category.Id == Category || (x.Category.Parent != null && x.Category.Parent.Id == Category));
            // custom account filter
            result = result.Where(x => filterAccount == 0 || x.Account.Id == filterAccount);
            // external account filter
            if (OnlyVisibleAccounts)
                result = result.Where(x => !x.Account.IsHideFromGraph);
            if (RuleApplied.HasValue)
            {
                var uCategory = dataService.GetCategoryByNameFromCache("Uncategorized");
                result = result.Where(x => x.Category.Id == uCategory.Id);
            }

            result = result.Where(x => string.IsNullOrWhiteSpace(filterDescription) || x.Description.ToUpper().Contains(filterDescription.ToUpper()));
            return result;
        }
    }

    int filterCategory = 0;
    int filterAccount = 0;
    string filterDescription = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await dataService.InitStaticStorage();
        allTransactions = await dataService.GetTransactions();
    }

    protected override Task OnParametersSetAsync()
    {
        pagination.ItemsPerPage = PageSize;
        var height = $"{HeightVH}vh";
        if (HeightPx > 0)
            height = $"{HeightPx}px";
        gridStyle = $"height: {height};width: 100%;overflow:auto;";
        if (string.IsNullOrEmpty(ChartPeriod))
            ChartPeriod = "a";

        if (ChartPeriod != "a")
        {
            dataService.GetDates(ChartPeriod, out var startDate, out var endDate);
            DateStart = startDate;
            DateEnd = endDate;
        }

        return base.OnParametersSetAsync();
    }

    private void FilterByCategory(Transaction transaction, bool isSet) => filterCategory = isSet ? transaction.Category.Id : 0;
    private void FilterByAccount(Transaction transaction, bool isSet) => filterAccount = isSet ? transaction.Account.Id : 0;

    private void FilterByDescription(ChangeEventArgs args)
    {
        if (args.Value is string value)
            filterDescription = value;
    }

    private void FilterByDescriptionClear()
    {
        if (string.IsNullOrWhiteSpace(filterDescription))
            filterDescription = string.Empty;
    }

    private async Task EditTransaction(Transaction transaction)
    {
        var dialog = await DialogService.ShowDialogAsync<EditTransactionDialog>(transaction, new DialogParameters
        {
            Height = "700px",
            Width = "800px",
            Title = "Edit Transaction",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            allTransactions = await dataService.ChangeTransaction((Transaction)result.Data);
            await Changed.InvokeAsync();
        }
    }

}