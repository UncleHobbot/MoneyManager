@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Tag())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    <EditForm EditContext="@_editContext" FormName="edit_rule">
        <DataAnnotationsValidator/>

        <FluentSelect TOption="string" Label="Compare Type" Width="100%"
                      Value="@selectedType" ValueChanged="@(e => selectedType = e)">
            <FluentOption Value="@RuleCompareType.Contains.ToString()">
                Contains
                <FluentIcon Value="@(new Icons.Regular.Size20.CenterHorizontal())" Color="@Color.Neutral"
                            Slot="start"/>
            </FluentOption>
            <FluentOption Value="@RuleCompareType.StartsWith.ToString()" Selected="@(selectedCategory == RuleCompareType.StartsWith.ToString())">
                Starts With
                <FluentIcon Value="@(new Icons.Regular.Size20.AlignStartHorizontal())" Color="@Color.Neutral"
                            Slot="start"/>
            </FluentOption>
            <FluentOption Value="@RuleCompareType.EndsWith.ToString()" Selected="@(selectedCategory == RuleCompareType.EndsWith.ToString())">
                Ends With
                <FluentIcon Value="@(new Icons.Regular.Size20.AlignEndHorizontal())" Color="@Color.Neutral"
                            Slot="start"/>
            </FluentOption>
            <FluentOption Value="@RuleCompareType.Equals.ToString()">
                Equals
                <FluentIcon Value="@(new Icons.Regular.Size20.EqualCircle())" Color="@Color.Neutral" Slot="start"/>
            </FluentOption>
        </FluentSelect>

        <FluentTextField @bind-Value="@Content.OriginalDescription" style="width: 100%;" Required Label="Original description"/>
        <FluentTextField @bind-Value="@Content.NewDescription" style="width: 100%;" Required Label="Change to"/>

        <FluentSelect ValueChanged="@(e => selectedCategory = e)" TOption="string" Height="250px" Label="Category" Width="100%">
            @foreach (var pCat in TreeCategories.OrderBy(x => x.Name))
            {
                <FluentOption Value="@pCat.Id.ToString()" Selected="@(pCat.Id.ToString() == selectedCategory)">
                    @pCat.Name
                    <FluentIcon Value="@CategoryHelper.CategoryIcon(pCat.Icon)" Color="@Color.Neutral" Slot="start"
                                Style="margin-right:5px; margin-left: 5px"/>
                </FluentOption>

                @if (pCat.Children.Count > 0)
                {
                    foreach (var cCat in pCat.Children.OrderBy((x => x.Name)))
                    {
                        <FluentOption Value="@cCat.Id.ToString()" Selected="@(cCat.Id.ToString() == selectedCategory)">&nbsp;&nbsp;&nbsp;&nbsp; @cCat.Name</FluentOption>
                    }
                }
            }
        </FluentSelect>
    </EditForm>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" Disabled="@(!_editContext.Validate())" OnClick="@SaveAsync"> Save </FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync"> Cancel </FluentButton>
</FluentDialogFooter>