@page "/transactions"
@inject DataService dataService
@using Microsoft.FluentUI.AspNetCore.Components

<FluentLabel Typo="Typography.H3"> Transactions </FluentLabel>
<br/>

<FluentDataGrid Items="@transactions" ResizableColumns=true Pagination="@pagination"
                GridTemplateColumns="100px 150px 100px 300px 500px"
                Style="height: 80vh;width: 100%;overflow:auto;">

    <PropertyColumn Property="x => x.Date" Format="d" Align="Align.Center" Title="Date" Sortable="true" InitialSortDirection="SortDirection.Descending"/>
    <PropertyColumn Property="x => x.Account.ShownName" Title="Account" Sortable="true"/>
    <PropertyColumn Property="x => x.AmountExt" Format="c2" Align="Align.End" Title="Amount"/>

    <TemplateColumn Align="Align.Center" Title="Category">
        <div style="display:flex;width:290px">
            <FluentIcon Value="@(context.Category.objIcon)"/>
            <div style="display:flex;align-items: center"> @context.Category.Name </div>
            <FluentSpacer/>
            <FluentButton IconEnd="@(new Icons.Filled.Size12.Filter())" Style="height: 20px" OnClick="@(() => FilterByCategory(context, true))"/>
            <FluentButton IconEnd="@(new Icons.Filled.Size12.Dismiss())" Style="height: 20px;margin-right: 10px" OnClick="@(() => FilterByCategory(context, false))"/>
            <div style="display:flex;align-items: center"> </div>
        </div>
    </TemplateColumn>

    <PropertyColumn Property="x => x.Description" Title="Description" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch type="search" Autofocus=true @bind-Value=filterDescription @oninput="FilterByDescription" @bind-Value:after="FilterByDescriptionClear" Placeholder="Description..."/>
            </div>
        </ColumnOptions>
    </PropertyColumn>

</FluentDataGrid>

<FluentPaginator State="@pagination"/>

@code {
    readonly PaginationState pagination = new() { ItemsPerPage = 35 };

    IQueryable<Transaction> alltransactions;

    IQueryable<Transaction> transactions => alltransactions?
        .Where(x => filterCategory == 0 || x.Category.Id == filterCategory || (x.Category.Parent != null && x.Category.Parent.Id == filterCategory))
        .Where(x => string.IsNullOrWhiteSpace(filterDescription) || x.Description.ToUpper().Contains(filterDescription.ToUpper()));

    int filterCategory = 0;
    string filterDescription = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        alltransactions = (await dataService.GetTransactions()).OrderByDescending(x => x.Date);
    }

    private void FilterByCategory(Transaction transaction, bool isSet) => filterCategory = isSet ? transaction.Category.Id : 0;

    private void FilterByDescription(ChangeEventArgs args)
    {
        if (args.Value is string value)
            filterDescription = value;
    }

    private void FilterByDescriptionClear()
    {
        if (string.IsNullOrWhiteSpace(filterDescription))
            filterDescription = string.Empty;
    }

}