@page "/month/{month}"
@using ApexCharts
@using Microsoft.FluentUI.AspNetCore.Components
@using Orientation = Microsoft.FluentUI.AspNetCore.Components.Orientation
@inject IJSRuntime JSRuntime
@inject DataService dataService

<FluentButton IconStart="@(new Icons.Filled.Size28.ArrowCircleLeft())" OnClick="GoBack"> Back </FluentButton>

<h3>MonthStat for @Month</h3>

<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Top" Width="100%" HorizontalGap="20">

    <ApexChart TItem="CategoryChart" Title="Income" Options="optionsI" Width="600" Height="600">
        <ApexPointSeries TItem="CategoryChart" Items="income" Name="Value"
                         SeriesType="SeriesType.Donut"
                         XValue="@(e => e.Category.Name)"
                         YAggregate="@(e => e.Sum(e => e.Amount))"
                         OrderByDescending="e => e.Y"/>
    </ApexChart>

    <ApexChart TItem="CategoryChart" Title="Expense" Options="optionsE" Width="600" Height="600">
        <ApexPointSeries TItem="CategoryChart" Items="expense" Name="Value"
                         SeriesType="SeriesType.Donut"
                         XValue="@(e => e.Category.Name)"
                         YAggregate="@(e => e.Sum(e => e.Amount))"
                         OrderByDescending="e => e.Y"/>
    </ApexChart>
</FluentStack>

@code {
    [Parameter] public string Month { get; set; }

    List<Transaction> transactions = [];
    List<CategoryChart> income = [];
    List<CategoryChart> expense = [];

    private ApexChartOptions<CategoryChart> optionsI { get; set; } = new();
    private ApexChartOptions<CategoryChart> optionsE { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        transactions = await dataService.ChartGetTransactions(Month);
        var catIncome = await dataService.GetCategoryByName("Income");

        income = transactions.Where(x => (x.Category.Parent ?? x.Category).Id == catIncome.Id)
            .GroupBy(x => x.Category.Parent ?? x.Category)
            .Select(x => new CategoryChart
            {
                Category = x.Key,
                Amount = x.Sum(x => (x.IsDebit ? -1 : 1) * x.Amount)
            }).OrderBy(x => x.Category.Name).ToList();

        expense = transactions.Where(x => (x.Category.Parent ?? x.Category).Id != catIncome.Id)
            .GroupBy(x => x.Category.Parent ?? x.Category)
            .Select(x => new CategoryChart
            {
                Category = x.Key,
                Amount = x.Sum(x => (x.IsDebit ? 1 : -1) * x.Amount)
            }).OrderBy(x => x.Category.Name).ToList();

        optionsI = new ApexChartOptions<CategoryChart>
        {
            Theme = new Theme { Mode = Mode.Dark, Palette = PaletteType.Palette1 },
            PlotOptions = new PlotOptions
            {
                Pie = new PlotOptionsPie
                {
                    Donut = new PlotOptionsDonut
                    {
                        Labels = new DonutLabels
                        {
                            Total = new DonutLabelTotal { FontSize = "24px", Color = "#D807B8", 
                                Formatter = @"function (w) {return (w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)).toLocaleString('en-US', {style: 'currency', currency: 'USD'})}" }
                        }
                    }
                }
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function(value, opts) {
                    if (value === undefined) {return '';}
                    return Number(value).toLocaleString('en-US', {style: 'currency', currency: 'USD'});}"
                }
            }
        };

        optionsE = new ApexChartOptions<CategoryChart>
        {
            Theme = new Theme { Mode = Mode.Dark, Palette = PaletteType.Palette1 },
            PlotOptions = new PlotOptions
            {
                Pie = new PlotOptionsPie
                {
                    Donut = new PlotOptionsDonut
                    {
                        Labels = new DonutLabels
                        {
                            Total = new DonutLabelTotal { FontSize = "24px", Color = "#D807B8", 
                                Formatter = @"function (w) {return (w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)).toLocaleString('en-US', {style: 'currency', currency: 'USD'})}" }
                        }
                    }
                }
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function(value, opts) {
                    if (value === undefined) {return '';}
                    return  Number(value).toLocaleString('en-US', {style: 'currency', currency: 'USD'});}"
                }
            }
        };
    }

    private async Task GoBack() => await JSRuntime.InvokeVoidAsync("history.back");
}