@page "/month/{month}"
@using ApexCharts
@using Microsoft.FluentUI.AspNetCore.Components
@using Orientation = Microsoft.FluentUI.AspNetCore.Components.Orientation
@inject IJSRuntime JSRuntime
@inject DataService dataService

<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="20" Style="margin: 10px 0;">
    <FluentButton IconStart="@(new Icons.Filled.Size28.ArrowCircleLeft())" OnClick="GoBack"> Back </FluentButton>
    <h3>@(dateStart.ToString("MMMM yyyy"))</h3>
</FluentStack>

<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Top" Width="100%" HorizontalGap="20">
    <ApexChart @ref=chartI TItem="CategoryChart" Title="Income" Options="optionsI" Width="600" Height="600" OnDataPointSelection=DataPointsSelected>
        <ApexPointSeries TItem="CategoryChart" Items="income" Name="Value"
                         SeriesType="SeriesType.Donut"
                         XValue="@(e => e.Category.Name)"
                         YAggregate="@(e => e.Sum(e => e.Amount))"
                         OrderByDescending="e => e.Y"/>
    </ApexChart>

    <ApexChart @ref=chartE TItem="CategoryChart" Title="Expense" Options="optionsE" Width="650" Height="650" OnDataPointSelection=DataPointsSelected>
        <ApexPointSeries TItem="CategoryChart" Items="expense" Name="Value"
                         SeriesType="SeriesType.Donut"
                         XValue="@(e => e.Category.Name)"
                         YAggregate="@(e => e.Sum(e => e.Amount))"
                         OrderByDescending="e => e.Y"/>
    </ApexChart>
</FluentStack>

<div style="margin-top: 10px">
    <TransactionsList DateStart="dateStart" DateEnd="dateEnd" Category="@selectedCategory?.Id" PageSize="7" HeightVH="32"
                      Changed="TransactionChanged"/>
</div>

@code {
    [Parameter] public string Month { get; set; }

    List<Transaction> transactions = [];
    List<CategoryChart> income = [];
    List<CategoryChart> expense = [];

    private ApexChart<CategoryChart> chartI, chartE;
    private ApexChartOptions<CategoryChart> optionsI { get; set; } = new();
    private ApexChartOptions<CategoryChart> optionsE { get; set; } = new();

    DateTime dateStart, dateEnd;
    Category selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        optionsI = new ApexChartOptions<CategoryChart>
        {
            Theme = new Theme { Mode = Mode.Dark, Palette = PaletteType.Palette1},
            PlotOptions = new PlotOptions
            {
                Pie = new PlotOptionsPie
                {
                    Donut = new PlotOptionsDonut
                    {
                        Labels = new DonutLabels
                        {
                            Total = new DonutLabelTotal
                            {
                                FontSize = "24px", Color = "#D807B8",
                                Formatter = @"function (w) {return (w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)).toLocaleString('en-US', {style: 'currency', currency: 'USD'})}"
                            }
                        }
                    }
                }
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function(value, opts) {
                    if (value === undefined) {return '';}
                    return Number(value).toLocaleString('en-US', {style: 'currency', currency: 'USD'});}"
                }
            },
            Legend = new Legend { Formatter = @"function(seriesName, opts) { return [seriesName, ': ', Number(opts.w.globals.series[opts.seriesIndex]).toLocaleString('en-US', {style: 'currency', currency: 'USD'})] }" }
        };
        optionsI.Chart.Background = "transparent";

        optionsE = new ApexChartOptions<CategoryChart>
        {
            Theme = new Theme { Mode = Mode.Dark, Palette = PaletteType.Palette1 },
            PlotOptions = new PlotOptions
            {
                Pie = new PlotOptionsPie
                {
                    Donut = new PlotOptionsDonut
                    {
                        Labels = new DonutLabels
                        {
                            Total = new DonutLabelTotal
                            {
                                FontSize = "24px", Color = "#D807B8",
                                Formatter = @"function (w) {return (w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)).toLocaleString('en-US', {style: 'currency', currency: 'USD'})}"
                            }
                        }
                    }
                }
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function(value, opts) {
                    if (value === undefined) {return '';}
                    return Number(value).toLocaleString('en-US', {style: 'currency', currency: 'USD'});}"
                }
            },
            Legend = new Legend { Formatter = @"function(seriesName, opts) { return [seriesName, ': ', Number(opts.w.globals.series[opts.seriesIndex]).toLocaleString('en-US', {style: 'currency', currency: 'USD'})] }" }
        };
        optionsE.Chart.Background = "transparent";

        await LoadData();
    }

    protected override Task OnParametersSetAsync()
    {
        dateStart = DateTime.ParseExact(Month, "yyMM", Thread.CurrentThread.CurrentCulture);
        dateEnd = dateStart.AddMonths(1).StartOfMonth(Thread.CurrentThread.CurrentCulture);

        return base.OnParametersSetAsync();
    }

    private async Task GoBack() => await JSRuntime.InvokeVoidAsync("history.back");

    private void DataPointsSelected(SelectedData<CategoryChart> selectedData)
    {
        if (selectedData?.DataPoint?.Items != null && selectedData?.DataPoint?.Items?.Count() > 0)
            selectedCategory = selectedData.DataPoint.Items.First().Category;
    }

    private async Task LoadData()
    {
        transactions = await dataService.ChartGetTransactions(Month);
        var catIncome = await dataService.GetCategoryByName("Income");

        income = transactions.Where(x => (x.Category.Parent ?? x.Category).Id == catIncome.Id)
            .GroupBy(x => x.Category)
            .Select(x => new CategoryChart
            {
                Category = x.Key,
                Amount = x.Sum(x => (x.IsDebit ? -1 : 1) * x.Amount)
            }).OrderBy(x => x.Category.Name).ToList();

        expense = transactions.Where(x => (x.Category.Parent ?? x.Category).Id != catIncome.Id)
            .GroupBy(x => x.Category.Parent ?? x.Category)
            .Select(x => new CategoryChart
            {
                Category = x.Key,
                Amount = x.Sum(x => (x.IsDebit ? 1 : -1) * x.Amount)
            }).OrderBy(x => x.Category.Name).ToList();
    }
    
    private async Task TransactionChanged()
    {
        await LoadData();
        await chartI.UpdateSeriesAsync(true);
        await chartE.UpdateSeriesAsync(true);
    }

}