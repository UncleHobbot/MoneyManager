@page "/accounts"
@inject DataService dataService
@inject IDialogService DialogService
@using Microsoft.FluentUI.AspNetCore.Components

<FluentLabel Typo="Typography.H3"> Accounts </FluentLabel>

<FluentToolbar id="toolbar-fluent-components" Style="margin: 50px 0;">
    <FluentButton Appearance="Appearance.Stealth">Add Account</FluentButton>
</FluentToolbar>

<FluentDataGrid Items="@FilteredItems" ResizableColumns=true Pagination="@pagination"
                GridTemplateColumns="1fr 5fr 10fr 10fr 5fr 5fr 5fr 2fr 1fr" Style="height: 80vh;overflow:auto;">
    <TemplateColumn Align="Align.Center" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn=true>
        <FluentIcon Value="@(context.TypeIcon)"/>
    </TemplateColumn>

    <PropertyColumn Property="c => c.ShownName" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(nameFilter)" Title="Name">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleShownNameFilter" @bind-Value:after="HandleShownNameClear" Placeholder="Account name..."/>
            </div>
        </ColumnOptions>
    </PropertyColumn>

    <PropertyColumn Property="x => x.Description" Title="Description"/>
    <PropertyColumn Property="x => x.Name" Title="Name in list 1"/>
    <PropertyColumn Property="x => x.AlternativeName1" Title="Name in list 2"/>
    <PropertyColumn Property="x => x.AlternativeName2" Title="Name in list 3"/>
    <PropertyColumn Property="x => x.Number"/>
    <TemplateColumn Align="Align.Center" Title="Hidden">
        @if (context.IsHideFromGraph)
        {
            <FluentIcon Value="@(new Icons.Regular.Size20.EyeOff())"/>
        }
    </TemplateColumn>

    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditAccount(context))"/>
    </TemplateColumn>
</FluentDataGrid>

<FluentPaginator State="@pagination"/>

@code {
    IQueryable<Account> accounts;
    IQueryable<Account> FilteredItems => accounts?.Where(x => x.ShownName.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
    readonly PaginationState pagination = new() { ItemsPerPage = 20 };
    string nameFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await dataService.InitStaticStorage();
        accounts = dataService.GetAccounts().AsQueryable();
    }

  private void HandleShownNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
            nameFilter = value;
    }

    private void HandleShownNameClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
            nameFilter = string.Empty;
    }

    private async Task EditAccount(Account account)
    {
        var dialog = await DialogService.ShowDialogAsync<EditAccountDialog>(account, new DialogParameters
        {
            Height = "600px",
            Title = $"Edit Account",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
            accounts = (dataService.ChangeAccount((Account)result.Data).GetAwaiter().GetResult())?.AsQueryable();
    }
}