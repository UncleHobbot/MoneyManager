@page "/accounts"
@inject DataService dataService
@inject IDialogService DialogService
@using Microsoft.FluentUI.AspNetCore.Components

<FluentLabel Typo="Typography.H3"> Accounts </FluentLabel>

<FluentToolbar id="toolbar-fluent-components">
    <FluentButton Appearance="Appearance.Stealth">Add Account</FluentButton>
</FluentToolbar>
<br/>

<FluentDataGrid Items="@FilteredItems" ResizableColumns=true Pagination="@pagination"
                GridTemplateColumns="1fr 5fr 10fr 10fr 5fr 5fr 5fr 2fr 1fr" Style="height: 80vh;overflow:auto;">
    <TemplateColumn Align="Align.Center" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn=true>
        <FluentIcon Value="@(context.TypeIcon)"/>
    </TemplateColumn>

    <PropertyColumn Property="c => c.ShownName" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(nameFilter)" Title="Name">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleShownNameFilter" @bind-Value:after="HandleShownNameClear" Placeholder="Account name..."/>
            </div>
        </ColumnOptions>
    </PropertyColumn>

    <PropertyColumn Property="x => x.Description" Title="Description"/>
    <PropertyColumn Property="x => x.Name" Title="Name in list 1"/>
    <PropertyColumn Property="x => x.AlternativeName1" Title="Name in list 2"/>
    <PropertyColumn Property="x => x.AlternativeName2" Title="Name in list 3"/>
    <PropertyColumn Property="x => x.Number"/>
    <TemplateColumn Align="Align.Center" Title="Hidden">
        @if (context.IsHideFromGraph)
        {
            <FluentIcon Value="@(new Icons.Regular.Size20.EyeOff())"/>
        }
    </TemplateColumn>

    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditAccount(context))"/>
    </TemplateColumn>
</FluentDataGrid>


<FluentPaginator State="@pagination"/>

@*
<MudDataGrid T="Account" Items="@accounts" ReadOnly="false" Dense="true"
             Filterable="true" FilterMode="DataGridFilterMode.Simple" SortMode="SortMode.Multiple"
             EditDialogOptions="new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true }"
             EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual" CommittedItemChanges="@CommittedItemChanges">
    <ToolBarContent>
        <MudButton Icon="MudIcons.Add" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    </ToolBarContent>
    <Columns>
        <MudBlazor.TemplateColumn CellClass="d-flex justify-start">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
            </CellTemplate>
        </MudBlazor.TemplateColumn>
        <TemplateColumn Title="Type">
            <CellTemplate>
                <MudIcon Icon="@GetTypeIcon(context.Item)"/>
            </CellTemplate>
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.Type" Required RequiredError="You must select a Position!!!">
                    <MudSelectItem Value="0">
                        <MudIcon Icon="@GetTypeIcon(0)"/> Chequing/Savings
                    </MudSelectItem>
                    <MudSelectItem Value="1">
                        <MudIcon Icon="@GetTypeIcon(1)"/> Credit Card
                    </MudSelectItem>
                    <MudSelectItem Value="2">
                        <MudIcon Icon="@GetTypeIcon(2)"/> Investment
                    </MudSelectItem>
                    <MudSelectItem Value="99">
                        <MudIcon Icon="@GetTypeIcon(99)"/> Other
                    </MudSelectItem>
                </MudSelect>
            </EditTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.ShownName" Title="Name"/>
        <PropertyColumn Property="x => x.Description" Required="false"/>
        <PropertyColumn Property="x => x.Name" Title="Name in list 1"/>
        <PropertyColumn Property="x => x.AlternativeName1" Title="Name in list 2" Required="false"/>
        <PropertyColumn Property="x => x.AlternativeName2" Title="Name in list 3" Required="false"/>
        <PropertyColumn Property="x => x.Number" Required="false"/>
        <TemplateColumn Title="Hidden">
            <CellTemplate>
                @if (context.Item.IsHideFromGraph)
                {
                    <MudIcon Icon="@Icons.Material.Filled.HideSource"/>
                }
            </CellTemplate>
            <EditTemplate>
                <MudSwitch @bind-Value="@context.Item.IsHideFromGraph"/>
            </EditTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
*@


@code {
    IQueryable<Account> accounts;
    IQueryable<Account> FilteredItems => accounts?.Where(x => x.ShownName.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
    readonly PaginationState pagination = new() { ItemsPerPage = 20 };
    string nameFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await dataService.InitStaticStorage();
        accounts = dataService.GetAccounts().AsQueryable();
    }

  private void HandleShownNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
            nameFilter = value;
    }

    private void HandleShownNameClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
            nameFilter = string.Empty;
    }

    private async Task EditAccount(Account account)
    {
        var dialog = await DialogService.ShowDialogAsync<EditAccountDialog>(account, new DialogParameters
        {
            Height = "600px",
            Title = $"Edit Account",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
            accounts = (dataService.ChangeAccount((Account)result.Data).GetAwaiter().GetResult())?.AsQueryable();
    }
}